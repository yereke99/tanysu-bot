package handler

import (
	"context"
	"fmt"
	"sync"
	"tanysu-bot/internal/keyboard"
	"tanysu-bot/internal/repository"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

type ChatState struct {
	mu       sync.RWMutex
	users    []int64
	userChat map[int64]int64
}

var globalState *ChatState
var once sync.Once

func GetChatState() *ChatState {
	once.Do(func() {
		globalState = &ChatState{
			users:    make([]int64, 0),
			userChat: make(map[int64]int64),
		}
	})
	return globalState
}

func NewChat() *ChatState {
	return &ChatState{
		users:    make([]int64, 0),
		userChat: make(map[int64]int64),
	}
}

func (c *ChatState) AddUser(userID int64) {
	c.mu.Lock()
	defer c.mu.Unlock()

	for _, u := range c.users {
		if u == userID {
			return
		}
	}
	c.users = append(c.users, userID)
}

func (c *ChatState) FindPartner(userID int64) int64 {
	c.mu.RLock()
	defer c.mu.RUnlock()

	for i, user := range c.users {
		if user != userID {
			c.users = append(c.users[:i], c.users[i+1:]...)
			return user
		}
	}
	return 0
}

func (c *ChatState) GetUsers() []int64 {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.users
}

func (c *ChatState) SetPartner(id int64, partnerID int64) {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.userChat[id] = partnerID
}

func (c *ChatState) GetUserPartner(id int64) int64 {
	c.mu.RLock()
	defer c.mu.RUnlock()

	return c.userChat[id]
}

func (c *ChatState) CheckPartnerToEmpty(id int64) bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if _, ok := c.userChat[id]; ok {
		return true
	}
	return false
}

func (c *ChatState) RemoveUser(id int64) {
	c.mu.Lock()
	defer c.mu.Unlock()
	// –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ users
	for i, u := range c.users {
		if u == id {
			c.users = append(c.users[:i], c.users[i+1:]...)
			break
		}
	}
	// –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞—Ä—Ç—ã –ø–∞—Ä
	delete(c.userChat, id)
}

// Handlers —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞
type Handler struct {
	chatState *repository.ChatRepository
	userRepo  *repository.UserRepository
}

func NewHandler(chatState *repository.ChatRepository, userRepo *repository.UserRepository) *Handler {
	return &Handler{chatState: chatState, userRepo: userRepo}
}

func (h *Handler) ensureUserInDB(update *models.Update) {
	var userID int64
	var username, firstName, lastName string

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ CallbackQuery
	if update.Message != nil {
		userID = update.Message.From.ID
		username = update.Message.From.Username
		firstName = update.Message.From.FirstName
		lastName = update.Message.From.LastName
	} else if update.CallbackQuery != nil {
		userID = update.CallbackQuery.From.ID
		username = update.CallbackQuery.From.Username
		firstName = update.CallbackQuery.From.FirstName
		lastName = update.CallbackQuery.From.LastName
	} else {
		return
	}

	exists, err := h.userRepo.UserExists(userID)
	if err != nil {
		fmt.Println("Error checking user existence:", err)
		return
	}
	if !exists {
		newUser := &repository.User{
			UserID:    userID,
			UserName:  username,
			FirstName: firstName,
			LastName:  lastName,
			// –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (Ava, AvaFileID, UserNickname, UserAge, UserSex, UserGeo, Contact) –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ
		}
		if err := h.userRepo.InsertUser(newUser); err != nil {
			fmt.Println("Error inserting user:", err)
		} else {
			fmt.Printf("User %d inserted into DB\n", userID)
		}
	}
}

// InlineHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (select_).
func (h *Handler) InlineHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª
	h.ensureUserInDB(update)

	userID := update.CallbackQuery.From.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞.
	var selectedUserID int64
	_, err := fmt.Sscanf(update.CallbackQuery.Data, "select_%d", &selectedUserID)
	if err != nil {
		fmt.Println("error parsing selectedUserID:", err)
		return
	}

	ok, err := h.chatState.CheckPartnerToEmpty(ctx, selectedUserID)
	if err != nil {
		fmt.Println("error in CheckPartnerToEmpty:", err)
		return
	}
	if ok {
		// –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–Ω—è—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   fmt.Sprintf("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ: %d", selectedUserID),
		})
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
	if err := h.chatState.SetPartner(ctx, userID, selectedUserID); err != nil {
		fmt.Println("error in SetPartner:", err)
		return
	}
	if err := h.chatState.SetPartner(ctx, selectedUserID, userID); err != nil {
		fmt.Println("error in SetPartner (partner):", err)
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: userID,
		Text:   fmt.Sprintf("–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å ID: %d", selectedUserID),
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: selectedUserID,
		Text:   fmt.Sprintf("–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å ID: %d", userID),
	})
}

// CallbackHandlerExit –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.
func (h *Handler) CallbackHandlerExit(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª
	h.ensureUserInDB(update)

	userID := update.CallbackQuery.From.ID
	partnerID, err := h.chatState.GetUserPartner(ctx, userID)
	if err != nil {
		fmt.Println("error in GetUserPartner:", err)
		return
	}

	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üí¨ Chat", "chat"))

	if err := h.chatState.RemoveUser(ctx, userID); err != nil {
		fmt.Println("error in RemoveUser:", err)
		return
	}

	if partnerID != 0 {
		if err := h.chatState.RemoveUser(ctx, partnerID); err != nil {
			fmt.Println("error in RemoveUser (partner):", err)
			return
		}
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      partnerID,
			Text:        "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.",
			ReplyMarkup: kb.Build(),
		})
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      userID,
		Text:        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.",
		ReplyMarkup: nil,
	})
}

// ChatButtonHandler —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
func (h *Handler) ChatButtonHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª
	h.ensureUserInDB(update)

	userID := update.CallbackQuery.From.ID

	if err := h.chatState.AddUser(ctx, userID); err != nil {
		fmt.Println("error in AddUser:", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
	users, err := h.chatState.GetUsers(ctx)
	if err != nil {
		fmt.Println("error in GetUsers:", err)
		return
	}

	kb := keyboard.NewKeyboard()
	for _, u := range users {
		if u != userID { // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			kb.AddRow(keyboard.NewInlineButton(fmt.Sprintf("User %d", u), fmt.Sprintf("select_%d", u)))
		}
	}

	if len(users) == 1 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
		})
		return
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      userID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
		ReplyMarkup: kb.Build(),
	})
}

// MessageHandler –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.
func (h *Handler) MessageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª
	h.ensureUserInDB(update)

	h.HandleChat(ctx, b, update, h.chatState)
}

// HelloHandler –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç.
func (h *Handler) HelloHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª
	h.ensureUserInDB(update)

	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üí¨ Chat", "chat"))

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        "Hello, *" + bot.EscapeMarkdown(update.Message.From.FirstName) + " please click button üí¨ Chat to join room*",
		ParseMode:   models.ParseModeMarkdown,
		ReplyMarkup: kb.Build(),
	})
	if err != nil {
		fmt.Println("Error sending message:", err)
	}
}

func (h *Handler) HandleChat(ctx context.Context, b *bot.Bot, update *models.Update, chatState *repository.ChatRepository) {
	userID := update.Message.From.ID
	partnerID, err := chatState.GetUserPartner(ctx, userID)
	if err != nil {
		fmt.Println("error in GetUserPartner", err)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
	fmt.Printf("[LOG] UserID=%d -> PartnerID=%d | MessageType=", userID, partnerID)

	kbChat := keyboard.NewKeyboard()
	kbChat.AddRow(keyboard.NewInlineButton("üí¨ Chat", "chat"))

	if partnerID == 0 {
		// –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
		fmt.Printf("NO_PARTNER\n") // –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         update.Message.Chat.ID,
			Text:           "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üí¨ Chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
			ReplyMarkup:    kbChat.Build(),
			ProtectContent: true, // –î–µ–ª–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
		})
		return
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
	kb := keyboard.NewKeyboard()
	kb.AddRow(keyboard.NewInlineButton("üîï Exit", "exit"))

	// –ü–æ–ª—É—á–∞–µ–º username –∏–ª–∏ FirstName
	username := update.Message.From.Username
	if username == "" {
		username = update.Message.From.FirstName
	}

	var caption string
	if update.Message.Caption != "" {
		caption = fmt.Sprintf("@%s: %s", username, update.Message.Caption)
	}

	switch {
	case update.Message.Text != "":
		fmt.Printf("TEXT | User=@%s | Text=%q\n", username, update.Message.Text)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         partnerID,
			Text:           fmt.Sprintf("@%s: %s", username, update.Message.Text),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
	case update.Message.Photo != nil:
		fmt.Printf("PHOTO | User=@%s | FileID=%s | Caption=%q\n",
			username,
			update.Message.Photo[len(update.Message.Photo)-1].FileID,
			update.Message.Caption,
		)

		photoID := update.Message.Photo[len(update.Message.Photo)-1].FileID
		b.SendPhoto(ctx, &bot.SendPhotoParams{
			ChatID:         partnerID,
			Photo:          &models.InputFileString{Data: photoID},
			Caption:        withDefaultCaption(username, caption, "—Ñ–æ—Ç–æ"),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
	case update.Message.Video != nil:
		fmt.Printf("VIDEO | User=@%s | FileID=%s | Caption=%q\n",
			username,
			update.Message.Video.FileID,
			update.Message.Caption,
		)

		b.SendVideo(ctx, &bot.SendVideoParams{
			ChatID:         partnerID,
			Video:          &models.InputFileString{Data: update.Message.Video.FileID},
			Caption:        withDefaultCaption(username, caption, "–≤–∏–¥–µ–æ"),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Voice != nil:
		fmt.Printf("VOICE | User=@%s | FileID=%s | Caption=%q\n",
			username,
			update.Message.Voice.FileID,
			update.Message.Caption,
		)

		b.SendVoice(ctx, &bot.SendVoiceParams{
			ChatID:         partnerID,
			Voice:          &models.InputFileString{Data: update.Message.Voice.FileID},
			Caption:        withDefaultCaption(username, caption, "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.VideoNote != nil:
		fmt.Printf("VIDEO_NOTE | User=@%s | FileID=%s\n",
			username,
			update.Message.VideoNote.FileID,
		)

		b.SendVideoNote(ctx, &bot.SendVideoNoteParams{
			ChatID:         partnerID,
			VideoNote:      &models.InputFileString{Data: update.Message.VideoNote.FileID},
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Document != nil:
		fmt.Printf("DOCUMENT | User=@%s | FileID=%s | Caption=%q\n",
			username,
			update.Message.Document.FileID,
			update.Message.Caption,
		)

		b.SendDocument(ctx, &bot.SendDocumentParams{
			ChatID:         partnerID,
			Document:       &models.InputFileString{Data: update.Message.Document.FileID},
			Caption:        withDefaultCaption(username, caption, "–¥–æ–∫—É–º–µ–Ω—Ç"),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Audio != nil:
		fmt.Printf("AUDIO | User=@%s | FileID=%s | Caption=%q\n",
			username,
			update.Message.Audio.FileID,
			update.Message.Caption,
		)

		b.SendAudio(ctx, &bot.SendAudioParams{
			ChatID:         partnerID,
			Audio:          &models.InputFileString{Data: update.Message.Audio.FileID},
			Caption:        withDefaultCaption(username, caption, "–∞—É–¥–∏–æ"),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Location != nil:
		fmt.Printf("LOCATION | User=@%s | Lat=%.5f | Long=%.5f\n",
			username,
			update.Message.Location.Latitude,
			update.Message.Location.Longitude,
		)

		b.SendLocation(ctx, &bot.SendLocationParams{
			ChatID:         partnerID,
			Latitude:       update.Message.Location.Latitude,
			Longitude:      update.Message.Location.Longitude,
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Sticker != nil:
		fmt.Printf("STICKER | User=@%s | FileID=%s\n",
			username,
			update.Message.Sticker.FileID,
		)

		b.SendSticker(ctx, &bot.SendStickerParams{
			ChatID:         partnerID,
			Sticker:        &models.InputFileString{Data: update.Message.Sticker.FileID},
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Contact != nil:
		contact := update.Message.Contact
		fmt.Printf("CONTACT | User=@%s | Phone=%s | FirstName=%s | LastName=%s\n",
			username,
			contact.PhoneNumber,
			contact.FirstName,
			contact.LastName,
		)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: partnerID,
			Text: fmt.Sprintf("@%s –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–æ–Ω—Ç–∞–∫—Ç:\n–¢–µ–ª: %s\n–ò–º—è: %s %s",
				username,
				contact.PhoneNumber,
				contact.FirstName,
				contact.LastName,
			),
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})

	case update.Message.Poll != nil:
		// –û–ø—Ä–æ—Å
		poll := update.Message.Poll
		fmt.Printf("POLL | User=@%s | Question=%q | Options=%d\n",
			username,
			poll.Question,
			len(poll.Options),
		)
		// –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ InputPollOption
		var pollOptions []models.InputPollOption
		for _, o := range poll.Options {
			pollOptions = append(pollOptions, models.InputPollOption{Text: o.Text})
		}
		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å —É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
		b.SendPoll(ctx, &bot.SendPollParams{
			ChatID:         partnerID,
			Question:       poll.Question,
			Options:        pollOptions,
			ProtectContent: true,
			// –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å: IsAnonymous: false –∏ —Ç.–¥.
		})

	default:
		fmt.Printf("UNKNOWN | User=@%s\n", username)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:         userID,
			Text:           "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.",
			ReplyMarkup:    kb.Build(),
			ProtectContent: true,
		})
	}
}

// withDefaultCaption ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
// –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏ (caption == ""),
// –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.
func withDefaultCaption(username, caption, mediaType string) string {
	if caption != "" {
		return caption // –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @username –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
	}
	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ, –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é
	return fmt.Sprintf("@%s –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) %s", username, mediaType)
}
